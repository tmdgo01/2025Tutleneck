import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

class ExerciseScreen extends StatelessWidget {
  final Map<String, List<String>> exerciseData = {
    'Î™©': ['ÌÑ± ÎãπÍ∏∞Í∏∞', 'Î≤Ω Î∞ÄÍ∏∞', 'Îß•ÏºÑÏßÄ'],
    'Ïñ¥Íπ®': ['ÌùâÎ∂Ä Ïä§Ìä∏Î†àÏπ≠', 'ÎÇ†Í∞úÎºà Î™®ÏúºÍ∏∞', 'ÏÉÅÎ∂Ä ÏäπÎ™®Í∑º'],
    'Îì±': ['Ïù¥ÎëêÍ∑º Ïä§Ìä∏Î†àÏπ≠', 'ÏÇºÎëêÍ∑º Ïä§Ìä∏Î†àÏπ≠', 'Ìåî ÎèåÎ¶¨Í∏∞'],
  };

  ExerciseScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3, // ÌÉ≠ Í∞úÏàò
      child: Scaffold(
        backgroundColor: Color(0xFFE4F3E1),
        appBar: AppBar(
          backgroundColor: Color(0xFFE4F3E1),
          elevation: 0,
          leading: IconButton(
            onPressed: () {
              Navigator.pop(context); // Îí§Î°ú Í∞ÄÍ∏∞
            },
            icon: Icon(
              Icons.arrow_back,
              color: Colors.black,
            ),
          ),
        ),
        body: Stack(
          children: [
            Column(
              children: [
                // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Î∞îÎ°ú ÏïÑÎûò ÌÉ≠Î∞î
                TabBar(
                  indicatorColor: Colors.red,
                  indicatorWeight: 4.0,
                  labelColor: Colors.green,
                  labelStyle: TextStyle(
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                  ),
                  unselectedLabelColor: Colors.grey,
                  unselectedLabelStyle: TextStyle(
                    fontSize: 16.0,
                    fontWeight: FontWeight.w300,
                  ),
                  // ÌÉ≠Î∞îÏóê Ï†ÅÏö©ÌïòÎäî Ìå®Îî©
                  padding: EdgeInsets.symmetric(vertical: 20.0),
                  tabs: [
                    Tab(text: 'Î™©'),
                    Tab(text: 'Ïñ¥Íπ®'),
                    Tab(text: 'Îì±'),
                  ],
                ),
                SizedBox(height: 20.0),
                // Ïö¥Îèô Î¶¨Ïä§Ìä∏
                Expanded(
                  child: TabBarView(
                    children: exerciseData.entries.map(
                          (e) {
                        return ListView.builder(
                          itemCount: e.value.length,
                          itemBuilder: (context, index) {
                            final exerciseName = e.value[index];
                            return GestureDetector(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => _ExerciseDetailScreen(
                                      exercise: exercises[index],
                                    ),
                                  ),
                                );
                              },
                              child: Padding(
                                padding: EdgeInsets.symmetric(
                                    horizontal: 10.0),
                                child: Row(
                                  children: [
                                    // Í±∞Î∂ÅÏù¥ Îì±ÍªçÏßà Ïù¥ÎØ∏ÏßÄ
                                    Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Container(
                                        width: 60.0,
                                        height: 60.0,
                                        decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(10),
                                          color: Colors.white,
                                        ),
                                        child: Center(
                                          child: Image.asset(
                                            'asset/1.png',
                                            width: 40.0,
                                            height: 40.0,
                                          ),
                                        ),
                                      ),
                                    ),
                                    SizedBox(width: 16.0),
                                    Text(
                                      e.value[index],
                                      style: TextStyle(
                                        fontSize: 20.0,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        );
                      },
                    ).toList(),
                  ),
                ),
              ],
            ),

            // ÌïòÎã® Ïù¥ÎØ∏ÏßÄ
            Positioned(
              bottom: 20.0,
              right: 20.0,
              child: Image.asset(
                'asset/sit.png',
                width: 60.0,
                height: 60.0,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

////// Ïö¥Îèô ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄ ////////
class _ExerciseDetailScreen extends StatefulWidget {
  final Exercise exercise;

  const _ExerciseDetailScreen({
    required this.exercise,
    super.key,
  });

  @override
  State<_ExerciseDetailScreen> createState() => _ExerciseDetailScreenState();
}

class _ExerciseDetailScreenState extends State<_ExerciseDetailScreen> {
  VideoPlayerController? _controller;
  bool _isPlaying = false;

  /// ÏãúÍ∞ÑÌëúÏãú Ìï®Ïàò ////
  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return '$minutes:$seconds';
  }


  @override
  void initState() {
    super.initState();
    if (widget.exercise.gifPath.endsWith('.mp4')) {
      _controller = VideoPlayerController.asset(widget.exercise.gifPath);
      _controller!.initialize().then((_) {
        setState(() {});
        _controller!.play();
        _isPlaying = true;    // ÏÉÅÌÉúÎ∞òÏòÅ
      }).catchError((error) {
        print('üî• Video initialize error: $error');
      });

      _controller!.addListener(() {
        if(mounted) setState(() {});
      });
    }
  }

  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFE4F3E1),
      appBar: AppBar(
        backgroundColor: Color(0xFFE4F3E1),
        elevation: 0,
        leading: IconButton(
          onPressed: () => Navigator.pop(context),
          icon: Icon(
            Icons.arrow_back,
            color: Colors.black,
          ),
        ),
        title: Text(widget.exercise.title,
          style: TextStyle(
            color: Colors.black,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.symmetric(
          horizontal: 24.0,
          vertical: 16.0,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            ////// Ïö¥Îèô ÎèôÏòÅÏÉÅ ÏúÑÏ†Ø + Î≤ÑÌäº //////////
            Center(
              child: widget.exercise.gifPath.endsWith('.mp4')
                  ? (_controller != null && _controller!.value.isInitialized
                  ? Container(
                child: Stack(
                  alignment: Alignment.bottomCenter,
                  children: [
                    AspectRatio(
                      aspectRatio: _controller!.value.aspectRatio,
                      child: VideoPlayer(_controller!),
                    ),

                    // Ïª®ÎìúÎ°§ Î∞î //
                    Container(
                      // color: Colors.black.withOpacity(0.4),   // Ïû¨ÏÉùÎ≤ÑÌäº,Ïû¨ÏÉùÎ∞î Îí§Ïóê ÏûàÎäî Î∞∞Í≤ΩÏÉâ
                      color: Colors.transparent,
                      padding: EdgeInsets.symmetric(
                        horizontal: 6.0, vertical:  6.0,
                      ),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          // ÏïÑÏù¥ÏΩò + ÏãúÍ∞ÑÌëúÏãú
                          IconButton(
                            onPressed: () {
                              setState(() {
                                if(_controller!.value.isPlaying){
                                  _controller!.pause();
                                  _isPlaying = false;
                                } else {
                                  _controller!.play();
                                  _isPlaying = true;
                                }
                              });
                            },
                            icon: Icon(_isPlaying
                                ? Icons.pause_circle_filled
                                : Icons.play_circle_fill,
                              color: Colors.white,
                              size: 30.0,
                            ),
                          ),

                          // ÏßÑÌñâ Î∞î
                          Expanded(
                            child: VideoProgressIndicator(
                              _controller!,
                              allowScrubbing: true,
                              colors: VideoProgressColors(
                                playedColor: Colors.green,
                                bufferedColor: Colors.grey,
                                backgroundColor: Colors.white,
                              ),
                            ),
                          ),

                          SizedBox(width: 12.0),

                          // ÏãúÍ∞ÑÌëúÏãú
                          Text('${_formatDuration(_controller!.value.position)} /'
                              '${_formatDuration(_controller!.value.duration)}',
                            style: TextStyle(
                              color: Colors.white,
                            ),
                          ),
                        ],
                      ),
                    ),

                  ],
                ),
              )
                  : CircularProgressIndicator())
                  : Image.asset(widget.exercise.gifPath),
            ),
            // ÎÇòÏ§ëÏóê Image.asset(exercise.gifPath)Î°ú ÍµêÏ≤¥

            SizedBox(height: 16.0),

            // ÏùåÏÑ± ÏïàÎÇ¥ Î≤ÑÌäº
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.grey[300],
                padding: EdgeInsets.symmetric(
                  horizontal: 24.0,
                  vertical: 12.0,
                ),
              ),
              onPressed: () {
                // ÎÇòÏ§ëÏóê TTS ÎòêÎäî Ïò§ÎîîÏò§ Ïû¨ÏÉù
                print('Play voice: ${widget.exercise.voiceGuide}');
              },
              child: Text('ÏùåÏÑ± ÏïàÎÇ¥'),
            ),

            SizedBox(height: 24.0),

            // Ïö¥Îèô ÏÑ§Î™Ö
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: widget.exercise.description.asMap().entries.map((e) {
                int idx = e.key + 1;
                String text = e.value;

                // ÏïûÎ∂ÄÎ∂Ñ (Ïòà: 'ÏãúÏûëÏûêÏÑ∏ :')Í≥º ÎÇòÎ®∏ÏßÄÎ°ú Î∂ÑÎ¶¨
                List<String> parts = text.split(':');
                String title = parts.length > 1 ? parts[0] : '';
                String body = parts.length > 1 ? parts.sublist(1).join(':') : text;

                return Padding(
                  padding: EdgeInsets.only(bottom: 12.0),  // Ìï≠Î™© ÏÇ¨Ïù¥ Í∞ÑÍ≤©
                  child: RichText(
                    text: TextSpan(
                      children: [
                        if(title.isNotEmpty)
                          TextSpan(
                            text: '$idx. $title: ',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16.0,
                              color: Colors.black,
                            ),
                          ),
                        TextSpan(
                          text: body,
                          style: TextStyle(
                            fontSize: 16.0,
                            color: Colors.black,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }
}

// Ïö¥Îèô Ï†ïÎ≥¥
class Exercise {
  final String title;
  final String gifPath;
  final List<String> description;
  final String voiceGuide;

  Exercise({
    required this.title,
    required this.gifPath,
    required this.description,
    required this.voiceGuide,
  });
}

// Ïö¥Îèô Î¶¨Ïä§Ìä∏ Ï†ïÏùò
final List<Exercise> exercises = [
  Exercise(
    title: 'Î™© Ïä§Ìä∏Î†àÏπ≠',
    gifPath: 'asset/ex1-1.mp4', // Ïã§Ï†ú gif Í≤ΩÎ°ú or ÏûÑÏãú
    description: [
      'ÏãúÏûëÏûêÏÑ∏ : ÏÉÅÏ≤¥ÏôÄ Ïñ¥Íπ®Î•º Ïù¥ÏôÑÏãúÏºú ÎÜìÍ≥† ÏñëÏÜêÏùò ÏóÑÏßÄÎ•º ÌÑ± ÏïÑÎûò Î∂ÄÏúÑÏóê ÎëîÎã§.',
      'ÎèôÏûë : ÏñëÏÜêÏùÑ Î™®ÏïÑ Îëê ÏóÑÏßÄÎ•º ÌÑ±Ïùò ÏïÑÎûò Î∂ÄÏúÑÏóê ÎåÄÍ≥† ÏÑúÏÑúÌûà Î®∏Î¶¨Î•º Îí§Î°ú Ï†ñÌûåÎã§.'
          'ÌïúÍ≥ÑÏ†êÏóê ÏôîÏùÑ Îïå Îëê ÏóÑÏßÄÏóê ÌûòÏùÑ Í∞ÄÌï¥ Î®∏Î¶¨Î•º Îí§Î°ú Ï¢Ä Îçî Ï†ñÌòÄ 10Ï¥àÍ∞Ñ Ïú†ÏßÄÌïúÎã§.',
      'Ï£ºÏùòÏÇ¨Ìï≠ : Î™© ÎîîÏä§ÌÅ¨Í∞Ä Ïã¨ÌïúÍ≤ΩÏö∞Îäî Ï¶ùÏÉÅÏùÑ ÏïÖÌôîÏãúÌÇ¨ Ïàò ÏûàÏúºÎØÄÎ°ú Î™©ÏùÑ Îí§Î°ú ÌñàÏùÑ Îïå'
          'Ïñ¥Íπ® Ï™ΩÏù¥ÎÇò Îì±Ï™ΩÏóê ÌÜµÏ¶ùÏù¥ÎÇò Ï†ÄÎ¶ºÏù¥ ÏûàÎäî Í≤ΩÏö∞ Ïù¥ Ïö¥ÎèôÏùÑ ÌîºÌïúÎã§.',
      'Ìö®Í≥º: Î™© ÏïûÏùò Í∑ºÏú°ÏùÑ Ïä§Ìä∏Î†àÏπ≠ ÏãúÏºúÏ£ºÏñ¥ Í∑∏ Í∏∞Îä•ÏùÑ ÏõêÌôúÌûà Ìï¥Ï£ºÎäî Ìö®Í≥ºÍ∞Ä ÏûàÎã§.'
          'ÌäπÌûà Î™© ÏΩîÏñ¥Í∑ºÏú°Ïù∏ Í≤ΩÏû•Í∑ºÏùÑ ÌôúÏÑ±Ìôî ÏãúÏºú Ï§ÄÎã§.'
    ],
    voiceGuide: 'assets/voice/tuck.mp3', // Ïã§Ï†ú ÏùåÏÑ± ÌååÏùº Í≤ΩÎ°ú
  ),
  Exercise(
    title: 'ÌÑ± ÎãπÍ∏∞Í∏∞',
    gifPath: 'assets/gif/tuck.gif', // Ïã§Ï†ú gif Í≤ΩÎ°ú or ÏûÑÏãú
    description: [
      'Ï†ïÎ©¥ÏùÑ Î∞îÎùºÎ≥∏Îã§.',
      'ÌÑ±ÏùÑ ÎãπÍ∏¥Îã§.',
      '5Ï¥àÍ∞Ñ ÏßÄÏÜçÌïúÎã§.',
      '10Ìöå 3set Ïã§Ïãú'
    ],
    voiceGuide: 'assets/voice/tuck.mp3', // Ïã§Ï†ú ÏùåÏÑ± ÌååÏùº Í≤ΩÎ°ú
  ),
  // Îã§Î•∏ Ïö¥ÎèôÎèÑ ÎèôÏùºÌïòÍ≤å Ï∂îÍ∞Ä
];


